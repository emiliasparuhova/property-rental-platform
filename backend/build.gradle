plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'individual'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'mysql:mysql-connector-java:8.0.33'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'org.json:json:20230227'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
}

sonar {
    properties {
        property "sonar.gradle.skipCompile", true
        property "sonar.projectKey", "Individual_S03"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.token", "sqp_f5a5f4ecbf6c6e1a99ad7368704357cc9d4aaa07"
        property "sonar.scm.disabled", true
        property "sonar.qualitygate.wait", true
        property "sonar.coverage.exclusions", [
                "src/**/individual/individualprojectbackend/domain/**/*",
                "src/**/individual/individualprojectbackend/persistence/**/*",
                "src/**/individual/individualprojectbackend/external/**/*",
                "src/**/individual/individualprojectbackend/controller/**/*",
                "src/**/individual/individualprojectbackend/configuration/**/*",
                "src/**/individual/individualprojectbackend/IndividualProjectBackendApplication.*",
                "src/**/**/configuration/**/*"
        ]
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "individual/individualprojectbackend/domain/*",
                    "individual/individualprojectbackend/persistence/*",
                    "individual/individualprojectbackend/external/*",
                    "individual/individualprojectbackend/controller/*",
                    "individual/individualprojectbackend/configuration/*",
                    "individual/individualprojectbackend/IndividualProjectBackendApplication.class",
                    "**/configuration/**/*"
            ])
        }))
    }
}

tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}

